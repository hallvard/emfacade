/*
* generated by Xtext
*/

package org.eclipse.gmt.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class EmfacadeGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class FacadeModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FacadeModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFacadeModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFacadeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGenModelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cGenModelGenPackageCrossReference_2_0 = (CrossReference)cGenModelAssignment_2.eContents().get(0);
		private final RuleCall cGenModelGenPackageQIDParserRuleCall_2_0_1 = (RuleCall)cGenModelGenPackageCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_3_1_0 = (RuleCall)cNameAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cUsesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cUsesFacadeModelsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cUsesFacadeModelsFacadeModelCrossReference_4_1_0 = (CrossReference)cUsesFacadeModelsAssignment_4_1.eContents().get(0);
		private final RuleCall cUsesFacadeModelsFacadeModelQIDParserRuleCall_4_1_0_1 = (RuleCall)cUsesFacadeModelsFacadeModelCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cUsesFacadeModelsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final CrossReference cUsesFacadeModelsFacadeModelCrossReference_4_2_1_0 = (CrossReference)cUsesFacadeModelsAssignment_4_2_1.eContents().get(0);
		private final RuleCall cUsesFacadeModelsFacadeModelQIDParserRuleCall_4_2_1_0_1 = (RuleCall)cUsesFacadeModelsFacadeModelCrossReference_4_2_1_0.eContents().get(1);
		private final Assignment cImportsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cImportsImportDirectiveParserRuleCall_5_0 = (RuleCall)cImportsAssignment_5.eContents().get(0);
		private final Assignment cFeatureMappingStrategiesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFeatureMappingStrategiesFeatureMappingStrategyParserRuleCall_6_0 = (RuleCall)cFeatureMappingStrategiesAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cFeatureMappingDefaultsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cFeatureMappingDefaultsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cFeatureMappingDefaultsEFeatureMappingOptionsParserRuleCall_7_1_0 = (RuleCall)cFeatureMappingDefaultsAssignment_7_1.eContents().get(0);
		private final Assignment cClassifierMappingsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cClassifierMappingsEClassifierMappingParserRuleCall_8_0 = (RuleCall)cClassifierMappingsAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cEPackagesKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cEPackagesAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final CrossReference cEPackagesEPackageCrossReference_9_2_0 = (CrossReference)cEPackagesAssignment_9_2.eContents().get(0);
		private final RuleCall cEPackagesEPackageEStringParserRuleCall_9_2_0_1 = (RuleCall)cEPackagesEPackageCrossReference_9_2_0.eContents().get(1);
		private final Group cGroup_9_3 = (Group)cGroup_9.eContents().get(3);
		private final Keyword cCommaKeyword_9_3_0 = (Keyword)cGroup_9_3.eContents().get(0);
		private final Assignment cEPackagesAssignment_9_3_1 = (Assignment)cGroup_9_3.eContents().get(1);
		private final CrossReference cEPackagesEPackageCrossReference_9_3_1_0 = (CrossReference)cEPackagesAssignment_9_3_1.eContents().get(0);
		private final RuleCall cEPackagesEPackageEStringParserRuleCall_9_3_1_0_1 = (RuleCall)cEPackagesEPackageCrossReference_9_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_9_4 = (Keyword)cGroup_9.eContents().get(4);
		
		//FacadeModel:
		//	{FacadeModel} "facade" genModel=[genmodel::GenPackage|QID] ("as" name=ID)? ("uses" usesFacadeModels+=[FacadeModel|QID]
		//	("," usesFacadeModels+=[FacadeModel|QID])*)? imports+=ImportDirective*
		//	featureMappingStrategies+=FeatureMappingStrategy* //		('package' basePackage=QID)?
		//	("feature-mapping-defaults" featureMappingDefaults=EFeatureMappingOptions)? classifierMappings+=EClassifierMapping*
		//	("ePackages" "(" ePackages+=[ecore::EPackage|EString] ("," ePackages+=[ecore::EPackage|EString])* ")")?;
		public ParserRule getRule() { return rule; }

		//{FacadeModel} "facade" genModel=[genmodel::GenPackage|QID] ("as" name=ID)? ("uses" usesFacadeModels+=[FacadeModel|QID]
		//("," usesFacadeModels+=[FacadeModel|QID])*)? imports+=ImportDirective*
		//featureMappingStrategies+=FeatureMappingStrategy* //		('package' basePackage=QID)?
		//("feature-mapping-defaults" featureMappingDefaults=EFeatureMappingOptions)? classifierMappings+=EClassifierMapping*
		//("ePackages" "(" ePackages+=[ecore::EPackage|EString] ("," ePackages+=[ecore::EPackage|EString])* ")")?
		public Group getGroup() { return cGroup; }

		//{FacadeModel}
		public Action getFacadeModelAction_0() { return cFacadeModelAction_0; }

		//"facade"
		public Keyword getFacadeKeyword_1() { return cFacadeKeyword_1; }

		//genModel=[genmodel::GenPackage|QID]
		public Assignment getGenModelAssignment_2() { return cGenModelAssignment_2; }

		//[genmodel::GenPackage|QID]
		public CrossReference getGenModelGenPackageCrossReference_2_0() { return cGenModelGenPackageCrossReference_2_0; }

		//QID
		public RuleCall getGenModelGenPackageQIDParserRuleCall_2_0_1() { return cGenModelGenPackageQIDParserRuleCall_2_0_1; }

		//("as" name=ID)?
		public Group getGroup_3() { return cGroup_3; }

		//"as"
		public Keyword getAsKeyword_3_0() { return cAsKeyword_3_0; }

		//name=ID
		public Assignment getNameAssignment_3_1() { return cNameAssignment_3_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_1_0() { return cNameIDTerminalRuleCall_3_1_0; }

		//("uses" usesFacadeModels+=[FacadeModel|QID] ("," usesFacadeModels+=[FacadeModel|QID])*)?
		public Group getGroup_4() { return cGroup_4; }

		//"uses"
		public Keyword getUsesKeyword_4_0() { return cUsesKeyword_4_0; }

		//usesFacadeModels+=[FacadeModel|QID]
		public Assignment getUsesFacadeModelsAssignment_4_1() { return cUsesFacadeModelsAssignment_4_1; }

		//[FacadeModel|QID]
		public CrossReference getUsesFacadeModelsFacadeModelCrossReference_4_1_0() { return cUsesFacadeModelsFacadeModelCrossReference_4_1_0; }

		//QID
		public RuleCall getUsesFacadeModelsFacadeModelQIDParserRuleCall_4_1_0_1() { return cUsesFacadeModelsFacadeModelQIDParserRuleCall_4_1_0_1; }

		//("," usesFacadeModels+=[FacadeModel|QID])*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//usesFacadeModels+=[FacadeModel|QID]
		public Assignment getUsesFacadeModelsAssignment_4_2_1() { return cUsesFacadeModelsAssignment_4_2_1; }

		//[FacadeModel|QID]
		public CrossReference getUsesFacadeModelsFacadeModelCrossReference_4_2_1_0() { return cUsesFacadeModelsFacadeModelCrossReference_4_2_1_0; }

		//QID
		public RuleCall getUsesFacadeModelsFacadeModelQIDParserRuleCall_4_2_1_0_1() { return cUsesFacadeModelsFacadeModelQIDParserRuleCall_4_2_1_0_1; }

		//imports+=ImportDirective*
		public Assignment getImportsAssignment_5() { return cImportsAssignment_5; }

		//ImportDirective
		public RuleCall getImportsImportDirectiveParserRuleCall_5_0() { return cImportsImportDirectiveParserRuleCall_5_0; }

		//featureMappingStrategies+=FeatureMappingStrategy*
		public Assignment getFeatureMappingStrategiesAssignment_6() { return cFeatureMappingStrategiesAssignment_6; }

		//FeatureMappingStrategy
		public RuleCall getFeatureMappingStrategiesFeatureMappingStrategyParserRuleCall_6_0() { return cFeatureMappingStrategiesFeatureMappingStrategyParserRuleCall_6_0; }

		//("feature-mapping-defaults" featureMappingDefaults=EFeatureMappingOptions)?
		public Group getGroup_7() { return cGroup_7; }

		//"feature-mapping-defaults"
		public Keyword getFeatureMappingDefaultsKeyword_7_0() { return cFeatureMappingDefaultsKeyword_7_0; }

		//featureMappingDefaults=EFeatureMappingOptions
		public Assignment getFeatureMappingDefaultsAssignment_7_1() { return cFeatureMappingDefaultsAssignment_7_1; }

		//EFeatureMappingOptions
		public RuleCall getFeatureMappingDefaultsEFeatureMappingOptionsParserRuleCall_7_1_0() { return cFeatureMappingDefaultsEFeatureMappingOptionsParserRuleCall_7_1_0; }

		//classifierMappings+=EClassifierMapping*
		public Assignment getClassifierMappingsAssignment_8() { return cClassifierMappingsAssignment_8; }

		//EClassifierMapping
		public RuleCall getClassifierMappingsEClassifierMappingParserRuleCall_8_0() { return cClassifierMappingsEClassifierMappingParserRuleCall_8_0; }

		//("ePackages" "(" ePackages+=[ecore::EPackage|EString] ("," ePackages+=[ecore::EPackage|EString])* ")")?
		public Group getGroup_9() { return cGroup_9; }

		//"ePackages"
		public Keyword getEPackagesKeyword_9_0() { return cEPackagesKeyword_9_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_9_1() { return cLeftParenthesisKeyword_9_1; }

		//ePackages+=[ecore::EPackage|EString]
		public Assignment getEPackagesAssignment_9_2() { return cEPackagesAssignment_9_2; }

		//[ecore::EPackage|EString]
		public CrossReference getEPackagesEPackageCrossReference_9_2_0() { return cEPackagesEPackageCrossReference_9_2_0; }

		//EString
		public RuleCall getEPackagesEPackageEStringParserRuleCall_9_2_0_1() { return cEPackagesEPackageEStringParserRuleCall_9_2_0_1; }

		//("," ePackages+=[ecore::EPackage|EString])*
		public Group getGroup_9_3() { return cGroup_9_3; }

		//","
		public Keyword getCommaKeyword_9_3_0() { return cCommaKeyword_9_3_0; }

		//ePackages+=[ecore::EPackage|EString]
		public Assignment getEPackagesAssignment_9_3_1() { return cEPackagesAssignment_9_3_1; }

		//[ecore::EPackage|EString]
		public CrossReference getEPackagesEPackageCrossReference_9_3_1_0() { return cEPackagesEPackageCrossReference_9_3_1_0; }

		//EString
		public RuleCall getEPackagesEPackageEStringParserRuleCall_9_3_1_0_1() { return cEPackagesEPackageEStringParserRuleCall_9_3_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_9_4() { return cRightParenthesisKeyword_9_4; }
	}

	public class MAPSTOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MAPSTO");
		private final Keyword cHyphenMinusGreaterThanSignKeyword = (Keyword)rule.eContents().get(1);
		
		//MAPSTO:
		//	"->";
		public ParserRule getRule() { return rule; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword() { return cHyphenMinusGreaterThanSignKeyword; }
	}

	public class MAPSFROMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MAPSFROM");
		private final Keyword cLessThanSignHyphenMinusKeyword = (Keyword)rule.eContents().get(1);
		
		//MAPSFROM:
		//	"<-";
		public ParserRule getRule() { return rule; }

		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword() { return cLessThanSignHyphenMinusKeyword; }
	}

	public class EClassifierMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EClassifierMapping");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEClassMappingParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEDataTypeMappingParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEEnumMappingParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//EClassifierMapping:
		//	EClassMapping | EDataTypeMapping | EEnumMapping;
		public ParserRule getRule() { return rule; }

		//EClassMapping | EDataTypeMapping | EEnumMapping
		public Alternatives getAlternatives() { return cAlternatives; }

		//EClassMapping
		public RuleCall getEClassMappingParserRuleCall_0() { return cEClassMappingParserRuleCall_0; }

		//EDataTypeMapping
		public RuleCall getEDataTypeMappingParserRuleCall_1() { return cEDataTypeMappingParserRuleCall_1; }

		//EEnumMapping
		public RuleCall getEEnumMappingParserRuleCall_2() { return cEEnumMappingParserRuleCall_2; }
	}

	public class EClassMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EClassMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEClassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEClassEClassCrossReference_1_0 = (CrossReference)cEClassAssignment_1.eContents().get(0);
		private final RuleCall cEClassEClassQIDParserRuleCall_1_0_1 = (RuleCall)cEClassEClassCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final RuleCall cMAPSTOParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cJClassAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cJClassJvmGenericTypeCrossReference_4_0 = (CrossReference)cJClassAssignment_4.eContents().get(0);
		private final RuleCall cJClassJvmGenericTypeQIDParserRuleCall_4_0_1 = (RuleCall)cJClassJvmGenericTypeCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cFeatureMappingDefaultsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cFeatureMappingDefaultsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cFeatureMappingDefaultsEFeatureMappingOptionsParserRuleCall_5_1_0 = (RuleCall)cFeatureMappingDefaultsAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLifeCycleKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cLifeCycleHandlerAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cLifeCycleHandlerLifeCycleImplementationParserRuleCall_6_1_0 = (RuleCall)cLifeCycleHandlerAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cMapKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cFeatureMappingsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cFeatureMappingsEFeatureMappingParserRuleCall_7_1_0 = (RuleCall)cFeatureMappingsAssignment_7_1.eContents().get(0);
		private final Group cGroup_7_2 = (Group)cGroup_7.eContents().get(2);
		private final Alternatives cAlternatives_7_2_0 = (Alternatives)cGroup_7_2.eContents().get(0);
		private final Keyword cMapKeyword_7_2_0_0 = (Keyword)cAlternatives_7_2_0.eContents().get(0);
		private final Keyword cCommaKeyword_7_2_0_1 = (Keyword)cAlternatives_7_2_0.eContents().get(1);
		private final Assignment cFeatureMappingsAssignment_7_2_1 = (Assignment)cGroup_7_2.eContents().get(1);
		private final RuleCall cFeatureMappingsEFeatureMappingParserRuleCall_7_2_1_0 = (RuleCall)cFeatureMappingsAssignment_7_2_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cHandleKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cEventHandlersAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cEventHandlersEventHandlerParserRuleCall_8_1_0 = (RuleCall)cEventHandlersAssignment_8_1.eContents().get(0);
		
		//EClassMapping:
		//	"class" eClass=[ecore::EClass|QID] ("as" name=ID)? MAPSTO jClass=[java::JvmGenericType|QID]
		//	("feature-mapping-defaults" featureMappingDefaults=EFeatureMappingOptions)? ("life-cycle"
		//	lifeCycleHandler=LifeCycleImplementation)? //	('create-with' createExpression = XExpressionInClosure)?
		//	//	('dispose-with' disposeExpression = XExpressionInClosure)?
		//	("map" featureMappings+=EFeatureMapping (("map" | ",") featureMappings+=EFeatureMapping)*)? ("handle"
		//	eventHandlers+=EventHandler)*;
		public ParserRule getRule() { return rule; }

		//"class" eClass=[ecore::EClass|QID] ("as" name=ID)? MAPSTO jClass=[java::JvmGenericType|QID] ("feature-mapping-defaults"
		//featureMappingDefaults=EFeatureMappingOptions)? ("life-cycle" lifeCycleHandler=LifeCycleImplementation)? //	('create-with' createExpression = XExpressionInClosure)?
		////	('dispose-with' disposeExpression = XExpressionInClosure)?
		//("map" featureMappings+=EFeatureMapping (("map" | ",") featureMappings+=EFeatureMapping)*)? ("handle"
		//eventHandlers+=EventHandler)*
		public Group getGroup() { return cGroup; }

		//"class"
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }

		//eClass=[ecore::EClass|QID]
		public Assignment getEClassAssignment_1() { return cEClassAssignment_1; }

		//[ecore::EClass|QID]
		public CrossReference getEClassEClassCrossReference_1_0() { return cEClassEClassCrossReference_1_0; }

		//QID
		public RuleCall getEClassEClassQIDParserRuleCall_1_0_1() { return cEClassEClassQIDParserRuleCall_1_0_1; }

		//("as" name=ID)?
		public Group getGroup_2() { return cGroup_2; }

		//"as"
		public Keyword getAsKeyword_2_0() { return cAsKeyword_2_0; }

		//name=ID
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_1_0() { return cNameIDTerminalRuleCall_2_1_0; }

		//MAPSTO
		public RuleCall getMAPSTOParserRuleCall_3() { return cMAPSTOParserRuleCall_3; }

		//jClass=[java::JvmGenericType|QID]
		public Assignment getJClassAssignment_4() { return cJClassAssignment_4; }

		//[java::JvmGenericType|QID]
		public CrossReference getJClassJvmGenericTypeCrossReference_4_0() { return cJClassJvmGenericTypeCrossReference_4_0; }

		//QID
		public RuleCall getJClassJvmGenericTypeQIDParserRuleCall_4_0_1() { return cJClassJvmGenericTypeQIDParserRuleCall_4_0_1; }

		//("feature-mapping-defaults" featureMappingDefaults=EFeatureMappingOptions)?
		public Group getGroup_5() { return cGroup_5; }

		//"feature-mapping-defaults"
		public Keyword getFeatureMappingDefaultsKeyword_5_0() { return cFeatureMappingDefaultsKeyword_5_0; }

		//featureMappingDefaults=EFeatureMappingOptions
		public Assignment getFeatureMappingDefaultsAssignment_5_1() { return cFeatureMappingDefaultsAssignment_5_1; }

		//EFeatureMappingOptions
		public RuleCall getFeatureMappingDefaultsEFeatureMappingOptionsParserRuleCall_5_1_0() { return cFeatureMappingDefaultsEFeatureMappingOptionsParserRuleCall_5_1_0; }

		//("life-cycle" lifeCycleHandler=LifeCycleImplementation)?
		public Group getGroup_6() { return cGroup_6; }

		//"life-cycle"
		public Keyword getLifeCycleKeyword_6_0() { return cLifeCycleKeyword_6_0; }

		//lifeCycleHandler=LifeCycleImplementation
		public Assignment getLifeCycleHandlerAssignment_6_1() { return cLifeCycleHandlerAssignment_6_1; }

		//LifeCycleImplementation
		public RuleCall getLifeCycleHandlerLifeCycleImplementationParserRuleCall_6_1_0() { return cLifeCycleHandlerLifeCycleImplementationParserRuleCall_6_1_0; }

		//("map" featureMappings+=EFeatureMapping (("map" | ",") featureMappings+=EFeatureMapping)*)?
		public Group getGroup_7() { return cGroup_7; }

		//"map"
		public Keyword getMapKeyword_7_0() { return cMapKeyword_7_0; }

		//featureMappings+=EFeatureMapping
		public Assignment getFeatureMappingsAssignment_7_1() { return cFeatureMappingsAssignment_7_1; }

		//EFeatureMapping
		public RuleCall getFeatureMappingsEFeatureMappingParserRuleCall_7_1_0() { return cFeatureMappingsEFeatureMappingParserRuleCall_7_1_0; }

		//(("map" | ",") featureMappings+=EFeatureMapping)*
		public Group getGroup_7_2() { return cGroup_7_2; }

		//"map" | ","
		public Alternatives getAlternatives_7_2_0() { return cAlternatives_7_2_0; }

		//"map"
		public Keyword getMapKeyword_7_2_0_0() { return cMapKeyword_7_2_0_0; }

		//","
		public Keyword getCommaKeyword_7_2_0_1() { return cCommaKeyword_7_2_0_1; }

		//featureMappings+=EFeatureMapping
		public Assignment getFeatureMappingsAssignment_7_2_1() { return cFeatureMappingsAssignment_7_2_1; }

		//EFeatureMapping
		public RuleCall getFeatureMappingsEFeatureMappingParserRuleCall_7_2_1_0() { return cFeatureMappingsEFeatureMappingParserRuleCall_7_2_1_0; }

		//("handle" eventHandlers+=EventHandler)*
		public Group getGroup_8() { return cGroup_8; }

		//"handle"
		public Keyword getHandleKeyword_8_0() { return cHandleKeyword_8_0; }

		//eventHandlers+=EventHandler
		public Assignment getEventHandlersAssignment_8_1() { return cEventHandlersAssignment_8_1; }

		//EventHandler
		public RuleCall getEventHandlersEventHandlerParserRuleCall_8_1_0() { return cEventHandlersEventHandlerParserRuleCall_8_1_0; }
	}

	public class LifeCycleImplementationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LifeCycleImplementation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMethodKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMethodImplementationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMethodImplementationsInterfaceMethodImplementationParserRuleCall_1_0 = (RuleCall)cMethodImplementationsAssignment_1.eContents().get(0);
		
		//LifeCycleImplementation:
		//	("method" methodImplementations+=InterfaceMethodImplementation)*;
		public ParserRule getRule() { return rule; }

		//("method" methodImplementations+=InterfaceMethodImplementation)*
		public Group getGroup() { return cGroup; }

		//"method"
		public Keyword getMethodKeyword_0() { return cMethodKeyword_0; }

		//methodImplementations+=InterfaceMethodImplementation
		public Assignment getMethodImplementationsAssignment_1() { return cMethodImplementationsAssignment_1; }

		//InterfaceMethodImplementation
		public RuleCall getMethodImplementationsInterfaceMethodImplementationParserRuleCall_1_0() { return cMethodImplementationsInterfaceMethodImplementationParserRuleCall_1_0; }
	}

	public class EventHandlerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventHandler");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInterfaceTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cInterfaceTypeJvmGenericTypeCrossReference_0_0 = (CrossReference)cInterfaceTypeAssignment_0.eContents().get(0);
		private final RuleCall cInterfaceTypeJvmGenericTypeQIDParserRuleCall_0_0_1 = (RuleCall)cInterfaceTypeJvmGenericTypeCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cMethodKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cMethodImplementationsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMethodImplementationsInterfaceMethodImplementationParserRuleCall_1_1_0 = (RuleCall)cMethodImplementationsAssignment_1_1.eContents().get(0);
		
		//EventHandler:
		//	interfaceType=[java::JvmGenericType|QID] ("method" methodImplementations+=InterfaceMethodImplementation)*;
		public ParserRule getRule() { return rule; }

		//interfaceType=[java::JvmGenericType|QID] ("method" methodImplementations+=InterfaceMethodImplementation)*
		public Group getGroup() { return cGroup; }

		//interfaceType=[java::JvmGenericType|QID]
		public Assignment getInterfaceTypeAssignment_0() { return cInterfaceTypeAssignment_0; }

		//[java::JvmGenericType|QID]
		public CrossReference getInterfaceTypeJvmGenericTypeCrossReference_0_0() { return cInterfaceTypeJvmGenericTypeCrossReference_0_0; }

		//QID
		public RuleCall getInterfaceTypeJvmGenericTypeQIDParserRuleCall_0_0_1() { return cInterfaceTypeJvmGenericTypeQIDParserRuleCall_0_0_1; }

		//("method" methodImplementations+=InterfaceMethodImplementation)*
		public Group getGroup_1() { return cGroup_1; }

		//"method"
		public Keyword getMethodKeyword_1_0() { return cMethodKeyword_1_0; }

		//methodImplementations+=InterfaceMethodImplementation
		public Assignment getMethodImplementationsAssignment_1_1() { return cMethodImplementationsAssignment_1_1; }

		//InterfaceMethodImplementation
		public RuleCall getMethodImplementationsInterfaceMethodImplementationParserRuleCall_1_1_0() { return cMethodImplementationsInterfaceMethodImplementationParserRuleCall_1_1_0; }
	}

	public class InterfaceMethodImplementationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfaceMethodImplementation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInterfaceMethodAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cInterfaceMethodJvmOperationCrossReference_0_0 = (CrossReference)cInterfaceMethodAssignment_0.eContents().get(0);
		private final RuleCall cInterfaceMethodJvmOperationFIDParserRuleCall_0_0_1 = (RuleCall)cInterfaceMethodJvmOperationCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cMAPSTOParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cMethodBodyAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMethodBodyXExpressionInClosureParserRuleCall_2_1_0 = (RuleCall)cMethodBodyAssignment_2_1.eContents().get(0);
		
		//InterfaceMethodImplementation:
		//	interfaceMethod=[java::JvmOperation|FID] ("as" name=ID)? (MAPSTO methodBody=XExpressionInClosure)?;
		public ParserRule getRule() { return rule; }

		//interfaceMethod=[java::JvmOperation|FID] ("as" name=ID)? (MAPSTO methodBody=XExpressionInClosure)?
		public Group getGroup() { return cGroup; }

		//interfaceMethod=[java::JvmOperation|FID]
		public Assignment getInterfaceMethodAssignment_0() { return cInterfaceMethodAssignment_0; }

		//[java::JvmOperation|FID]
		public CrossReference getInterfaceMethodJvmOperationCrossReference_0_0() { return cInterfaceMethodJvmOperationCrossReference_0_0; }

		//FID
		public RuleCall getInterfaceMethodJvmOperationFIDParserRuleCall_0_0_1() { return cInterfaceMethodJvmOperationFIDParserRuleCall_0_0_1; }

		//("as" name=ID)?
		public Group getGroup_1() { return cGroup_1; }

		//"as"
		public Keyword getAsKeyword_1_0() { return cAsKeyword_1_0; }

		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }

		//(MAPSTO methodBody=XExpressionInClosure)?
		public Group getGroup_2() { return cGroup_2; }

		//MAPSTO
		public RuleCall getMAPSTOParserRuleCall_2_0() { return cMAPSTOParserRuleCall_2_0; }

		//methodBody=XExpressionInClosure
		public Assignment getMethodBodyAssignment_2_1() { return cMethodBodyAssignment_2_1; }

		//XExpressionInClosure
		public RuleCall getMethodBodyXExpressionInClosureParserRuleCall_2_1_0() { return cMethodBodyXExpressionInClosureParserRuleCall_2_1_0; }
	}

	public class EFeatureMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EFeatureMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEFeatureAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cEFeatureEStructuralFeatureCrossReference_0_0 = (CrossReference)cEFeatureAssignment_0.eContents().get(0);
		private final RuleCall cEFeatureEStructuralFeatureIDTerminalRuleCall_0_0_1 = (RuleCall)cEFeatureEStructuralFeatureCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cMAPSTOParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cJClassAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cJClassJvmGenericTypeCrossReference_2_1_0 = (CrossReference)cJClassAssignment_2_1.eContents().get(0);
		private final RuleCall cJClassJvmGenericTypeQIDParserRuleCall_2_1_0_1 = (RuleCall)cJClassJvmGenericTypeCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cUsingKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOptionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOptionsEFeatureMappingOptionsParserRuleCall_3_1_0 = (RuleCall)cOptionsAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cMethodKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMethodImplementationsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMethodImplementationsInterfaceMethodImplementationParserRuleCall_4_1_0 = (RuleCall)cMethodImplementationsAssignment_4_1.eContents().get(0);
		
		//EFeatureMapping:
		//	eFeature=[ecore::EStructuralFeature] ("as" name=ID)? (MAPSTO jClass=[java::JvmGenericType|QID])? ("using"
		//	options=EFeatureMappingOptions)? ("method" methodImplementations+=InterfaceMethodImplementation)*;
		public ParserRule getRule() { return rule; }

		//eFeature=[ecore::EStructuralFeature] ("as" name=ID)? (MAPSTO jClass=[java::JvmGenericType|QID])? ("using"
		//options=EFeatureMappingOptions)? ("method" methodImplementations+=InterfaceMethodImplementation)*
		public Group getGroup() { return cGroup; }

		//eFeature=[ecore::EStructuralFeature]
		public Assignment getEFeatureAssignment_0() { return cEFeatureAssignment_0; }

		//[ecore::EStructuralFeature]
		public CrossReference getEFeatureEStructuralFeatureCrossReference_0_0() { return cEFeatureEStructuralFeatureCrossReference_0_0; }

		//ID
		public RuleCall getEFeatureEStructuralFeatureIDTerminalRuleCall_0_0_1() { return cEFeatureEStructuralFeatureIDTerminalRuleCall_0_0_1; }

		//("as" name=ID)?
		public Group getGroup_1() { return cGroup_1; }

		//"as"
		public Keyword getAsKeyword_1_0() { return cAsKeyword_1_0; }

		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }

		//(MAPSTO jClass=[java::JvmGenericType|QID])?
		public Group getGroup_2() { return cGroup_2; }

		//MAPSTO
		public RuleCall getMAPSTOParserRuleCall_2_0() { return cMAPSTOParserRuleCall_2_0; }

		//jClass=[java::JvmGenericType|QID]
		public Assignment getJClassAssignment_2_1() { return cJClassAssignment_2_1; }

		//[java::JvmGenericType|QID]
		public CrossReference getJClassJvmGenericTypeCrossReference_2_1_0() { return cJClassJvmGenericTypeCrossReference_2_1_0; }

		//QID
		public RuleCall getJClassJvmGenericTypeQIDParserRuleCall_2_1_0_1() { return cJClassJvmGenericTypeQIDParserRuleCall_2_1_0_1; }

		//("using" options=EFeatureMappingOptions)?
		public Group getGroup_3() { return cGroup_3; }

		//"using"
		public Keyword getUsingKeyword_3_0() { return cUsingKeyword_3_0; }

		//options=EFeatureMappingOptions
		public Assignment getOptionsAssignment_3_1() { return cOptionsAssignment_3_1; }

		//EFeatureMappingOptions
		public RuleCall getOptionsEFeatureMappingOptionsParserRuleCall_3_1_0() { return cOptionsEFeatureMappingOptionsParserRuleCall_3_1_0; }

		//("method" methodImplementations+=InterfaceMethodImplementation)*
		public Group getGroup_4() { return cGroup_4; }

		//"method"
		public Keyword getMethodKeyword_4_0() { return cMethodKeyword_4_0; }

		//methodImplementations+=InterfaceMethodImplementation
		public Assignment getMethodImplementationsAssignment_4_1() { return cMethodImplementationsAssignment_4_1; }

		//InterfaceMethodImplementation
		public RuleCall getMethodImplementationsInterfaceMethodImplementationParserRuleCall_4_1_0() { return cMethodImplementationsInterfaceMethodImplementationParserRuleCall_4_1_0; }
	}

	public class EFeatureMappingOptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EFeatureMappingOptions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEFeatureMappingOptionsAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cStrategyKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cStrategyAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cStrategyFeatureMappingStrategyCrossReference_1_1_0 = (CrossReference)cStrategyAssignment_1_1.eContents().get(0);
		private final RuleCall cStrategyFeatureMappingStrategyIDTerminalRuleCall_1_1_0_1 = (RuleCall)cStrategyFeatureMappingStrategyCrossReference_1_1_0.eContents().get(1);
		
		//EFeatureMappingOptions:
		//	{EFeatureMappingOptions} ("strategy" strategy=[FeatureMappingStrategy])?;
		public ParserRule getRule() { return rule; }

		//{EFeatureMappingOptions} ("strategy" strategy=[FeatureMappingStrategy])?
		public Group getGroup() { return cGroup; }

		//{EFeatureMappingOptions}
		public Action getEFeatureMappingOptionsAction_0() { return cEFeatureMappingOptionsAction_0; }

		//("strategy" strategy=[FeatureMappingStrategy])?
		public Group getGroup_1() { return cGroup_1; }

		//"strategy"
		public Keyword getStrategyKeyword_1_0() { return cStrategyKeyword_1_0; }

		//strategy=[FeatureMappingStrategy]
		public Assignment getStrategyAssignment_1_1() { return cStrategyAssignment_1_1; }

		//[FeatureMappingStrategy]
		public CrossReference getStrategyFeatureMappingStrategyCrossReference_1_1_0() { return cStrategyFeatureMappingStrategyCrossReference_1_1_0; }

		//ID
		public RuleCall getStrategyFeatureMappingStrategyIDTerminalRuleCall_1_1_0_1() { return cStrategyFeatureMappingStrategyIDTerminalRuleCall_1_1_0_1; }
	}

	public class EDataTypeMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EDataTypeMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEDataTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEDataTypeEDataTypeCrossReference_1_0 = (CrossReference)cEDataTypeAssignment_1.eContents().get(0);
		private final RuleCall cEDataTypeEDataTypeQIDParserRuleCall_1_0_1 = (RuleCall)cEDataTypeEDataTypeCrossReference_1_0.eContents().get(1);
		private final RuleCall cMAPSTOParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cJClassAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cJClassJvmGenericTypeCrossReference_3_0 = (CrossReference)cJClassAssignment_3.eContents().get(0);
		private final RuleCall cJClassJvmGenericTypeQIDParserRuleCall_3_0_1 = (RuleCall)cJClassJvmGenericTypeCrossReference_3_0.eContents().get(1);
		private final RuleCall cMAPSTOParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cConvertExpressionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConvertExpressionXExpressionParserRuleCall_5_0 = (RuleCall)cConvertExpressionAssignment_5.eContents().get(0);
		
		//EDataTypeMapping:
		//	"type" eDataType=[ecore::EDataType|QID] MAPSTO jClass=[java::JvmGenericType|QID] MAPSTO convertExpression=XExpression;
		public ParserRule getRule() { return rule; }

		//"type" eDataType=[ecore::EDataType|QID] MAPSTO jClass=[java::JvmGenericType|QID] MAPSTO convertExpression=XExpression
		public Group getGroup() { return cGroup; }

		//"type"
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }

		//eDataType=[ecore::EDataType|QID]
		public Assignment getEDataTypeAssignment_1() { return cEDataTypeAssignment_1; }

		//[ecore::EDataType|QID]
		public CrossReference getEDataTypeEDataTypeCrossReference_1_0() { return cEDataTypeEDataTypeCrossReference_1_0; }

		//QID
		public RuleCall getEDataTypeEDataTypeQIDParserRuleCall_1_0_1() { return cEDataTypeEDataTypeQIDParserRuleCall_1_0_1; }

		//MAPSTO
		public RuleCall getMAPSTOParserRuleCall_2() { return cMAPSTOParserRuleCall_2; }

		//jClass=[java::JvmGenericType|QID]
		public Assignment getJClassAssignment_3() { return cJClassAssignment_3; }

		//[java::JvmGenericType|QID]
		public CrossReference getJClassJvmGenericTypeCrossReference_3_0() { return cJClassJvmGenericTypeCrossReference_3_0; }

		//QID
		public RuleCall getJClassJvmGenericTypeQIDParserRuleCall_3_0_1() { return cJClassJvmGenericTypeQIDParserRuleCall_3_0_1; }

		//MAPSTO
		public RuleCall getMAPSTOParserRuleCall_4() { return cMAPSTOParserRuleCall_4; }

		//convertExpression=XExpression
		public Assignment getConvertExpressionAssignment_5() { return cConvertExpressionAssignment_5; }

		//XExpression
		public RuleCall getConvertExpressionXExpressionParserRuleCall_5_0() { return cConvertExpressionXExpressionParserRuleCall_5_0; }
	}

	public class EEnumMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EEnumMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEDataTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEDataTypeEEnumCrossReference_1_0 = (CrossReference)cEDataTypeAssignment_1.eContents().get(0);
		private final RuleCall cEDataTypeEEnumQIDParserRuleCall_1_0_1 = (RuleCall)cEDataTypeEEnumCrossReference_1_0.eContents().get(1);
		private final RuleCall cMAPSTOParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cJClassAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cJClassJvmGenericTypeCrossReference_3_0 = (CrossReference)cJClassAssignment_3.eContents().get(0);
		private final RuleCall cJClassJvmGenericTypeQIDParserRuleCall_3_0_1 = (RuleCall)cJClassJvmGenericTypeCrossReference_3_0.eContents().get(1);
		private final Assignment cLiteralMappingsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLiteralMappingsEEnumLiteralMappingParserRuleCall_4_0 = (RuleCall)cLiteralMappingsAssignment_4.eContents().get(0);
		private final RuleCall cMAPSTOParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cConvertExpressionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cConvertExpressionXExpressionParserRuleCall_6_0 = (RuleCall)cConvertExpressionAssignment_6.eContents().get(0);
		
		//EEnumMapping:
		//	"enum" eDataType=[ecore::EEnum|QID] MAPSTO jClass=[java::JvmGenericType|QID] literalMappings+=EEnumLiteralMapping*
		//	MAPSTO convertExpression=XExpression;
		public ParserRule getRule() { return rule; }

		//"enum" eDataType=[ecore::EEnum|QID] MAPSTO jClass=[java::JvmGenericType|QID] literalMappings+=EEnumLiteralMapping*
		//MAPSTO convertExpression=XExpression
		public Group getGroup() { return cGroup; }

		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//eDataType=[ecore::EEnum|QID]
		public Assignment getEDataTypeAssignment_1() { return cEDataTypeAssignment_1; }

		//[ecore::EEnum|QID]
		public CrossReference getEDataTypeEEnumCrossReference_1_0() { return cEDataTypeEEnumCrossReference_1_0; }

		//QID
		public RuleCall getEDataTypeEEnumQIDParserRuleCall_1_0_1() { return cEDataTypeEEnumQIDParserRuleCall_1_0_1; }

		//MAPSTO
		public RuleCall getMAPSTOParserRuleCall_2() { return cMAPSTOParserRuleCall_2; }

		//jClass=[java::JvmGenericType|QID]
		public Assignment getJClassAssignment_3() { return cJClassAssignment_3; }

		//[java::JvmGenericType|QID]
		public CrossReference getJClassJvmGenericTypeCrossReference_3_0() { return cJClassJvmGenericTypeCrossReference_3_0; }

		//QID
		public RuleCall getJClassJvmGenericTypeQIDParserRuleCall_3_0_1() { return cJClassJvmGenericTypeQIDParserRuleCall_3_0_1; }

		//literalMappings+=EEnumLiteralMapping*
		public Assignment getLiteralMappingsAssignment_4() { return cLiteralMappingsAssignment_4; }

		//EEnumLiteralMapping
		public RuleCall getLiteralMappingsEEnumLiteralMappingParserRuleCall_4_0() { return cLiteralMappingsEEnumLiteralMappingParserRuleCall_4_0; }

		//MAPSTO
		public RuleCall getMAPSTOParserRuleCall_5() { return cMAPSTOParserRuleCall_5; }

		//convertExpression=XExpression
		public Assignment getConvertExpressionAssignment_6() { return cConvertExpressionAssignment_6; }

		//XExpression
		public RuleCall getConvertExpressionXExpressionParserRuleCall_6_0() { return cConvertExpressionXExpressionParserRuleCall_6_0; }
	}

	public class EEnumLiteralMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EEnumLiteralMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEnumLiteralAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cEnumLiteralEEnumLiteralCrossReference_0_0 = (CrossReference)cEnumLiteralAssignment_0.eContents().get(0);
		private final RuleCall cEnumLiteralEEnumLiteralIDTerminalRuleCall_0_0_1 = (RuleCall)cEnumLiteralEEnumLiteralCrossReference_0_0.eContents().get(1);
		private final RuleCall cMAPSTOParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cConvertExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConvertExpressionXExpressionParserRuleCall_2_0 = (RuleCall)cConvertExpressionAssignment_2.eContents().get(0);
		
		//EEnumLiteralMapping:
		//	enumLiteral=[ecore::EEnumLiteral] MAPSTO convertExpression=XExpression;
		public ParserRule getRule() { return rule; }

		//enumLiteral=[ecore::EEnumLiteral] MAPSTO convertExpression=XExpression
		public Group getGroup() { return cGroup; }

		//enumLiteral=[ecore::EEnumLiteral]
		public Assignment getEnumLiteralAssignment_0() { return cEnumLiteralAssignment_0; }

		//[ecore::EEnumLiteral]
		public CrossReference getEnumLiteralEEnumLiteralCrossReference_0_0() { return cEnumLiteralEEnumLiteralCrossReference_0_0; }

		//ID
		public RuleCall getEnumLiteralEEnumLiteralIDTerminalRuleCall_0_0_1() { return cEnumLiteralEEnumLiteralIDTerminalRuleCall_0_0_1; }

		//MAPSTO
		public RuleCall getMAPSTOParserRuleCall_1() { return cMAPSTOParserRuleCall_1; }

		//convertExpression=XExpression
		public Assignment getConvertExpressionAssignment_2() { return cConvertExpressionAssignment_2; }

		//XExpression
		public RuleCall getConvertExpressionXExpressionParserRuleCall_2_0() { return cConvertExpressionXExpressionParserRuleCall_2_0; }
	}

	public class FeatureMappingStrategyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureMappingStrategy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStrategyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImplTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cImplTypeJvmGenericTypeCrossReference_1_0 = (CrossReference)cImplTypeAssignment_1.eContents().get(0);
		private final RuleCall cImplTypeJvmGenericTypeQIDParserRuleCall_1_0_1 = (RuleCall)cImplTypeJvmGenericTypeCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final RuleCall cMAPSTOParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cInterfaceTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cInterfaceTypeJvmGenericTypeCrossReference_4_0 = (CrossReference)cInterfaceTypeAssignment_4.eContents().get(0);
		private final RuleCall cInterfaceTypeJvmGenericTypeQIDParserRuleCall_4_0_1 = (RuleCall)cInterfaceTypeJvmGenericTypeCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cMapKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cPatternsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cPatternsFeatureMappingStrategyPatternParserRuleCall_5_1_0 = (RuleCall)cPatternsAssignment_5_1.eContents().get(0);
		
		//FeatureMappingStrategy:
		//	"strategy" implType=[java::JvmGenericType|QID] ("as" name=ID)? MAPSTO interfaceType=[java::JvmGenericType|QID] ("map"
		//	patterns+=FeatureMappingStrategyPattern)*;
		public ParserRule getRule() { return rule; }

		//"strategy" implType=[java::JvmGenericType|QID] ("as" name=ID)? MAPSTO interfaceType=[java::JvmGenericType|QID] ("map"
		//patterns+=FeatureMappingStrategyPattern)*
		public Group getGroup() { return cGroup; }

		//"strategy"
		public Keyword getStrategyKeyword_0() { return cStrategyKeyword_0; }

		//implType=[java::JvmGenericType|QID]
		public Assignment getImplTypeAssignment_1() { return cImplTypeAssignment_1; }

		//[java::JvmGenericType|QID]
		public CrossReference getImplTypeJvmGenericTypeCrossReference_1_0() { return cImplTypeJvmGenericTypeCrossReference_1_0; }

		//QID
		public RuleCall getImplTypeJvmGenericTypeQIDParserRuleCall_1_0_1() { return cImplTypeJvmGenericTypeQIDParserRuleCall_1_0_1; }

		//("as" name=ID)?
		public Group getGroup_2() { return cGroup_2; }

		//"as"
		public Keyword getAsKeyword_2_0() { return cAsKeyword_2_0; }

		//name=ID
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_1_0() { return cNameIDTerminalRuleCall_2_1_0; }

		//MAPSTO
		public RuleCall getMAPSTOParserRuleCall_3() { return cMAPSTOParserRuleCall_3; }

		//interfaceType=[java::JvmGenericType|QID]
		public Assignment getInterfaceTypeAssignment_4() { return cInterfaceTypeAssignment_4; }

		//[java::JvmGenericType|QID]
		public CrossReference getInterfaceTypeJvmGenericTypeCrossReference_4_0() { return cInterfaceTypeJvmGenericTypeCrossReference_4_0; }

		//QID
		public RuleCall getInterfaceTypeJvmGenericTypeQIDParserRuleCall_4_0_1() { return cInterfaceTypeJvmGenericTypeQIDParserRuleCall_4_0_1; }

		//("map" patterns+=FeatureMappingStrategyPattern)*
		public Group getGroup_5() { return cGroup_5; }

		//"map"
		public Keyword getMapKeyword_5_0() { return cMapKeyword_5_0; }

		//patterns+=FeatureMappingStrategyPattern
		public Assignment getPatternsAssignment_5_1() { return cPatternsAssignment_5_1; }

		//FeatureMappingStrategyPattern
		public RuleCall getPatternsFeatureMappingStrategyPatternParserRuleCall_5_1_0() { return cPatternsFeatureMappingStrategyPatternParserRuleCall_5_1_0; }
	}

	public class FeatureMappingStrategyPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureMappingStrategyPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFeatureNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFeatureNameNamePatternParserRuleCall_0_0 = (RuleCall)cFeatureNameAssignment_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cTypeParametersAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cTypeParametersJvmTypeParameterParserRuleCall_2_0_0 = (RuleCall)cTypeParametersAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cTypeParametersAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cTypeParametersJvmTypeParameterParserRuleCall_2_1_1_0 = (RuleCall)cTypeParametersAssignment_2_1_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cMethodKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMethodPatternsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMethodPatternsFeatureMappingStrategyMethodPatternParserRuleCall_4_1_0 = (RuleCall)cMethodPatternsAssignment_4_1.eContents().get(0);
		
		//FeatureMappingStrategyPattern:
		//	featureName=NamePattern "<" (typeParameters+=JvmTypeParameter ("," typeParameters+=JvmTypeParameter)*)? ">" ("method"
		//	methodPatterns+=FeatureMappingStrategyMethodPattern)*;
		public ParserRule getRule() { return rule; }

		//featureName=NamePattern "<" (typeParameters+=JvmTypeParameter ("," typeParameters+=JvmTypeParameter)*)? ">" ("method"
		//methodPatterns+=FeatureMappingStrategyMethodPattern)*
		public Group getGroup() { return cGroup; }

		//featureName=NamePattern
		public Assignment getFeatureNameAssignment_0() { return cFeatureNameAssignment_0; }

		//NamePattern
		public RuleCall getFeatureNameNamePatternParserRuleCall_0_0() { return cFeatureNameNamePatternParserRuleCall_0_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }

		//(typeParameters+=JvmTypeParameter ("," typeParameters+=JvmTypeParameter)*)?
		public Group getGroup_2() { return cGroup_2; }

		//typeParameters+=JvmTypeParameter
		public Assignment getTypeParametersAssignment_2_0() { return cTypeParametersAssignment_2_0; }

		//JvmTypeParameter
		public RuleCall getTypeParametersJvmTypeParameterParserRuleCall_2_0_0() { return cTypeParametersJvmTypeParameterParserRuleCall_2_0_0; }

		//("," typeParameters+=JvmTypeParameter)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//typeParameters+=JvmTypeParameter
		public Assignment getTypeParametersAssignment_2_1_1() { return cTypeParametersAssignment_2_1_1; }

		//JvmTypeParameter
		public RuleCall getTypeParametersJvmTypeParameterParserRuleCall_2_1_1_0() { return cTypeParametersJvmTypeParameterParserRuleCall_2_1_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }

		//("method" methodPatterns+=FeatureMappingStrategyMethodPattern)*
		public Group getGroup_4() { return cGroup_4; }

		//"method"
		public Keyword getMethodKeyword_4_0() { return cMethodKeyword_4_0; }

		//methodPatterns+=FeatureMappingStrategyMethodPattern
		public Assignment getMethodPatternsAssignment_4_1() { return cMethodPatternsAssignment_4_1; }

		//FeatureMappingStrategyMethodPattern
		public RuleCall getMethodPatternsFeatureMappingStrategyMethodPatternParserRuleCall_4_1_0() { return cMethodPatternsFeatureMappingStrategyMethodPatternParserRuleCall_4_1_0; }
	}

	public class NamePatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamePattern");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NamePattern returns ecore::EString:
		//	ID | STRING;
		public ParserRule getRule() { return rule; }

		//ID | STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}

	public class JvmTypeParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JvmTypeParameter");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//JvmTypeParameter returns java::JvmTypeParameter:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class FeatureMappingStrategyMethodPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureMappingStrategyMethodPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStrategyMethodAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cStrategyMethodJvmOperationCrossReference_0_0 = (CrossReference)cStrategyMethodAssignment_0.eContents().get(0);
		private final RuleCall cStrategyMethodJvmOperationIDTerminalRuleCall_0_0_1 = (RuleCall)cStrategyMethodJvmOperationCrossReference_0_0.eContents().get(1);
		private final RuleCall cMAPSTOParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cTargetMemberAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cTargetMemberAlternatives_2_0 = (Alternatives)cTargetMemberAssignment_2.eContents().get(0);
		private final RuleCall cTargetMemberJvmFieldParserRuleCall_2_0_0 = (RuleCall)cTargetMemberAlternatives_2_0.eContents().get(0);
		private final RuleCall cTargetMemberJvmOperationParserRuleCall_2_0_1 = (RuleCall)cTargetMemberAlternatives_2_0.eContents().get(1);
		private final RuleCall cMAPSTOParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cTargetBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTargetBodyXExpressionInClosureParserRuleCall_4_0 = (RuleCall)cTargetBodyAssignment_4.eContents().get(0);
		
		//FeatureMappingStrategyMethodPattern:
		//	strategyMethod=[java::JvmOperation] MAPSTO targetMember=(JvmField | JvmOperation) MAPSTO
		//	targetBody=XExpressionInClosure;
		public ParserRule getRule() { return rule; }

		//strategyMethod=[java::JvmOperation] MAPSTO targetMember=(JvmField | JvmOperation) MAPSTO targetBody=XExpressionInClosure
		public Group getGroup() { return cGroup; }

		//strategyMethod=[java::JvmOperation]
		public Assignment getStrategyMethodAssignment_0() { return cStrategyMethodAssignment_0; }

		//[java::JvmOperation]
		public CrossReference getStrategyMethodJvmOperationCrossReference_0_0() { return cStrategyMethodJvmOperationCrossReference_0_0; }

		//ID
		public RuleCall getStrategyMethodJvmOperationIDTerminalRuleCall_0_0_1() { return cStrategyMethodJvmOperationIDTerminalRuleCall_0_0_1; }

		//MAPSTO
		public RuleCall getMAPSTOParserRuleCall_1() { return cMAPSTOParserRuleCall_1; }

		//targetMember=(JvmField | JvmOperation)
		public Assignment getTargetMemberAssignment_2() { return cTargetMemberAssignment_2; }

		//JvmField | JvmOperation
		public Alternatives getTargetMemberAlternatives_2_0() { return cTargetMemberAlternatives_2_0; }

		//JvmField
		public RuleCall getTargetMemberJvmFieldParserRuleCall_2_0_0() { return cTargetMemberJvmFieldParserRuleCall_2_0_0; }

		//JvmOperation
		public RuleCall getTargetMemberJvmOperationParserRuleCall_2_0_1() { return cTargetMemberJvmOperationParserRuleCall_2_0_1; }

		//MAPSTO
		public RuleCall getMAPSTOParserRuleCall_3() { return cMAPSTOParserRuleCall_3; }

		//targetBody=XExpressionInClosure
		public Assignment getTargetBodyAssignment_4() { return cTargetBodyAssignment_4; }

		//XExpressionInClosure
		public RuleCall getTargetBodyXExpressionInClosureParserRuleCall_4_0() { return cTargetBodyXExpressionInClosureParserRuleCall_4_0; }
	}

	public class JvmFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JvmField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cSimpleNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSimpleNameIDTerminalRuleCall_2_0 = (RuleCall)cSimpleNameAssignment_2.eContents().get(0);
		
		//JvmField returns java::JvmField:
		//	"field" type=JvmTypeReference simpleName=ID;
		public ParserRule getRule() { return rule; }

		//"field" type=JvmTypeReference simpleName=ID
		public Group getGroup() { return cGroup; }

		//"field"
		public Keyword getFieldKeyword_0() { return cFieldKeyword_0; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_0() { return cTypeJvmTypeReferenceParserRuleCall_1_0; }

		//simpleName=ID
		public Assignment getSimpleNameAssignment_2() { return cSimpleNameAssignment_2; }

		//ID
		public RuleCall getSimpleNameIDTerminalRuleCall_2_0() { return cSimpleNameIDTerminalRuleCall_2_0; }
	}

	public class JvmOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JvmOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReturnTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReturnTypeJvmTypeReferenceParserRuleCall_0_0 = (RuleCall)cReturnTypeAssignment_0.eContents().get(0);
		private final Assignment cSimpleNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSimpleNameIDTerminalRuleCall_1_0 = (RuleCall)cSimpleNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersJvmFormalParameterParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersJvmFormalParameterParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//JvmOperation returns java::JvmOperation:
		//	returnType=JvmTypeReference simpleName=ID "(" (parameters+=JvmFormalParameter ("," parameters+=JvmFormalParameter)*)?
		//	")";
		public ParserRule getRule() { return rule; }

		//returnType=JvmTypeReference simpleName=ID "(" (parameters+=JvmFormalParameter ("," parameters+=JvmFormalParameter)*)?
		//")"
		public Group getGroup() { return cGroup; }

		//returnType=JvmTypeReference
		public Assignment getReturnTypeAssignment_0() { return cReturnTypeAssignment_0; }

		//JvmTypeReference
		public RuleCall getReturnTypeJvmTypeReferenceParserRuleCall_0_0() { return cReturnTypeJvmTypeReferenceParserRuleCall_0_0; }

		//simpleName=ID
		public Assignment getSimpleNameAssignment_1() { return cSimpleNameAssignment_1; }

		//ID
		public RuleCall getSimpleNameIDTerminalRuleCall_1_0() { return cSimpleNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(parameters+=JvmFormalParameter ("," parameters+=JvmFormalParameter)*)?
		public Group getGroup_3() { return cGroup_3; }

		//parameters+=JvmFormalParameter
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }

		//JvmFormalParameter
		public RuleCall getParametersJvmFormalParameterParserRuleCall_3_0_0() { return cParametersJvmFormalParameterParserRuleCall_3_0_0; }

		//("," parameters+=JvmFormalParameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//parameters+=JvmFormalParameter
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }

		//JvmFormalParameter
		public RuleCall getParametersJvmFormalParameterParserRuleCall_3_1_1_0() { return cParametersJvmFormalParameterParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class JvmFormalParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JvmFormalParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParameterTypeJvmTypeReferenceParserRuleCall_0_0 = (RuleCall)cParameterTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//JvmFormalParameter returns java::JvmFormalParameter:
		//	parameterType=JvmTypeReference name=ID;
		public ParserRule getRule() { return rule; }

		//parameterType=JvmTypeReference name=ID
		public Group getGroup() { return cGroup; }

		//parameterType=JvmTypeReference
		public Assignment getParameterTypeAssignment_0() { return cParameterTypeAssignment_0; }

		//JvmTypeReference
		public RuleCall getParameterTypeJvmTypeReferenceParserRuleCall_0_0() { return cParameterTypeJvmTypeReferenceParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// *
		//strategy GetSetStrategy1 -> Association
		//	map X<M,ME,V,VE>
		//		method get(M) -> VE V.getX() -> v.getX()
		//		method set(M,ME) -> void V.setX(VE) -> v.setX(ve)
		//	map X<M,ME,V,VE>
		//		method get(M) -> VE V.x -> v.x
		//		method set(M,ME) -> VE V.x -> v.x = ve
		// * / / *
		//NameTypePatternFMS returns FeatureMappingStrategy:
		//	 {NameTypePatternFMS}
		//	 'strategy' implType = [java::JvmGenericType|QID] 'for' interfaceType = [java::JvmGenericType|QID] 
		//	 '{'
		//	 	pattern = NameTypePattern
		//	 '}'
		//;
		//
		//NameTypePattern:
		//	{NameTypePattern}
		//	'members' '{'
		//		(memberPatterns += MemberPattern)*
		//	'}'
		//;
		//
		//MemberPattern: 
		//	typePattern = TypePattern namePattern = NamePattern (parameterListPattern = TypeListPattern)?
		//;
		//
		//TypeListPattern:
		//	{TypeListPattern} '(' (parameterTypePatterns += TypePattern (','parameterTypePatterns += TypePattern)*)? ')'
		//;
		//
		//TypePattern returns ecore::EString: (QID | '#' | '$' | STRING);
		//NamePattern returns ecore::EString: (ID | '$' | STRING)+;
		// * / //
		//EString returns ecore::EString:
		//	STRING;
		public ParserRule getRule() { return rule; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}

	public class QIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QID returns ecore::EString:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class FIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1_1_1 = (RuleCall)cGroup_1_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//FID returns ecore::EString:
		//	ID ("(" (ID ("," ID)*)? ")")?;
		public ParserRule getRule() { return rule; }

		//ID ("(" (ID ("," ID)*)? ")")?
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("(" (ID ("," ID)*)? ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//(ID ("," ID)*)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1_0() { return cIDTerminalRuleCall_1_1_0; }

		//("," ID)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_1_0() { return cCommaKeyword_1_1_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1_1_1() { return cIDTerminalRuleCall_1_1_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class ImportDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cImportedNamespaceAlternatives_1_0 = (Alternatives)cImportedNamespaceAssignment_1.eContents().get(0);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0_0 = (RuleCall)cImportedNamespaceAlternatives_1_0.eContents().get(0);
		private final RuleCall cImportedNamespaceSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cImportedNamespaceAlternatives_1_0.eContents().get(1);
		
		//ImportDirective:
		//	"import" importedNamespace=(QualifiedNameWithWildcard | STRING);
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=(QualifiedNameWithWildcard | STRING)
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=(QualifiedNameWithWildcard | STRING)
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildcard | STRING
		public Alternatives getImportedNamespaceAlternatives_1_0() { return cImportedNamespaceAlternatives_1_0; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0_0; }

		//STRING
		public RuleCall getImportedNamespaceSTRINGTerminalRuleCall_1_0_1() { return cImportedNamespaceSTRINGTerminalRuleCall_1_0_1; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQIDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard returns ecore::EString:
		//	QID ".*"?;
		public ParserRule getRule() { return rule; }

		//QID ".*"?
		public Group getGroup() { return cGroup; }

		//QID
		public RuleCall getQIDParserRuleCall_0() { return cQIDParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class XAdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XAdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0 = (CrossReference)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementOpAddParserRuleCall_1_0_0_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandXMultiplicativeExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		////
		//XAdditiveExpression returns xbase::XExpression:
		//	XMultiplicativeExpression (=> ({xbase::XBinaryOperation.leftOperand=current}
		//	feature=[java::JvmIdentifiableElement|OpAdd]) rightOperand=XMultiplicativeExpression)*;
		public ParserRule getRule() { return rule; }

		//XMultiplicativeExpression (=> ({xbase::XBinaryOperation.leftOperand=current}
		//feature=[java::JvmIdentifiableElement|OpAdd]) rightOperand=XMultiplicativeExpression)*
		public Group getGroup() { return cGroup; }

		//XMultiplicativeExpression
		public RuleCall getXMultiplicativeExpressionParserRuleCall_0() { return cXMultiplicativeExpressionParserRuleCall_0; }

		//(=> ({xbase::XBinaryOperation.leftOperand=current} feature=[java::JvmIdentifiableElement|OpAdd])
		//rightOperand=XMultiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({xbase::XBinaryOperation.leftOperand=current} feature=[java::JvmIdentifiableElement|OpAdd])
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{xbase::XBinaryOperation.leftOperand=current} feature=[java::JvmIdentifiableElement|OpAdd]
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{xbase::XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_0_0_0() { return cXBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=[java::JvmIdentifiableElement|OpAdd]
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//[java::JvmIdentifiableElement|OpAdd]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0; }

		//OpAdd
		public RuleCall getFeatureJvmIdentifiableElementOpAddParserRuleCall_1_0_0_1_0_1() { return cFeatureJvmIdentifiableElementOpAddParserRuleCall_1_0_0_1_0_1; }

		//rightOperand=XMultiplicativeExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//XMultiplicativeExpression
		public RuleCall getRightOperandXMultiplicativeExpressionParserRuleCall_1_1_0() { return cRightOperandXMultiplicativeExpressionParserRuleCall_1_1_0; }
	}

	public class OpAddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpAdd");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cVerticalLineKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//OpAdd:
		//	"+" | "-" | "|";
		public ParserRule getRule() { return rule; }

		//"+" | "-" | "|"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//"|"
		public Keyword getVerticalLineKeyword_2() { return cVerticalLineKeyword_2; }
	}

	public class XPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XPrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXConstructorCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXBlockExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXSwitchExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXFeatureCallParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cXLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cXIfExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cXWhileExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cXThrowExpressionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cXTryCatchFinallyExpressionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cXParenthesizedExpressionParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//XPrimaryExpression returns xbase::XExpression:
		//	XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression | //	XForLoopExpression |
		//	XWhileExpression | //	XDoWhileExpression |
		//	XThrowExpression | //	XReturnExpression |
		//	XTryCatchFinallyExpression | XParenthesizedExpression;
		public ParserRule getRule() { return rule; }

		//XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression | //	XForLoopExpression |
		//XWhileExpression | //	XDoWhileExpression |
		//XThrowExpression | //	XReturnExpression |
		//XTryCatchFinallyExpression | XParenthesizedExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//XConstructorCall
		public RuleCall getXConstructorCallParserRuleCall_0() { return cXConstructorCallParserRuleCall_0; }

		//XBlockExpression
		public RuleCall getXBlockExpressionParserRuleCall_1() { return cXBlockExpressionParserRuleCall_1; }

		//XSwitchExpression
		public RuleCall getXSwitchExpressionParserRuleCall_2() { return cXSwitchExpressionParserRuleCall_2; }

		//XFeatureCall
		public RuleCall getXFeatureCallParserRuleCall_3() { return cXFeatureCallParserRuleCall_3; }

		//XLiteral
		public RuleCall getXLiteralParserRuleCall_4() { return cXLiteralParserRuleCall_4; }

		//XIfExpression
		public RuleCall getXIfExpressionParserRuleCall_5() { return cXIfExpressionParserRuleCall_5; }

		////	XForLoopExpression |
		//XWhileExpression
		public RuleCall getXWhileExpressionParserRuleCall_6() { return cXWhileExpressionParserRuleCall_6; }

		////	XDoWhileExpression |
		//XThrowExpression
		public RuleCall getXThrowExpressionParserRuleCall_7() { return cXThrowExpressionParserRuleCall_7; }

		////	XReturnExpression |
		//XTryCatchFinallyExpression
		public RuleCall getXTryCatchFinallyExpressionParserRuleCall_8() { return cXTryCatchFinallyExpressionParserRuleCall_8; }

		//XParenthesizedExpression
		public RuleCall getXParenthesizedExpressionParserRuleCall_9() { return cXParenthesizedExpressionParserRuleCall_9; }
	}
	
	
	private FacadeModelElements pFacadeModel;
	private MAPSTOElements pMAPSTO;
	private MAPSFROMElements pMAPSFROM;
	private EClassifierMappingElements pEClassifierMapping;
	private EClassMappingElements pEClassMapping;
	private LifeCycleImplementationElements pLifeCycleImplementation;
	private EventHandlerElements pEventHandler;
	private InterfaceMethodImplementationElements pInterfaceMethodImplementation;
	private EFeatureMappingElements pEFeatureMapping;
	private EFeatureMappingOptionsElements pEFeatureMappingOptions;
	private EDataTypeMappingElements pEDataTypeMapping;
	private EEnumMappingElements pEEnumMapping;
	private EEnumLiteralMappingElements pEEnumLiteralMapping;
	private FeatureMappingStrategyElements pFeatureMappingStrategy;
	private FeatureMappingStrategyPatternElements pFeatureMappingStrategyPattern;
	private NamePatternElements pNamePattern;
	private JvmTypeParameterElements pJvmTypeParameter;
	private FeatureMappingStrategyMethodPatternElements pFeatureMappingStrategyMethodPattern;
	private JvmFieldElements pJvmField;
	private JvmOperationElements pJvmOperation;
	private JvmFormalParameterElements pJvmFormalParameter;
	private EStringElements pEString;
	private QIDElements pQID;
	private FIDElements pFID;
	private ImportDirectiveElements pImportDirective;
	private QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private XAdditiveExpressionElements pXAdditiveExpression;
	private OpAddElements pOpAdd;
	private XPrimaryExpressionElements pXPrimaryExpression;
	
	private final GrammarProvider grammarProvider;

	private XbaseGrammarAccess gaXbase;

	@Inject
	public EmfacadeGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammarProvider = grammarProvider;
		this.gaXbase = gaXbase;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//FacadeModel:
	//	{FacadeModel} "facade" genModel=[genmodel::GenPackage|QID] ("as" name=ID)? ("uses" usesFacadeModels+=[FacadeModel|QID]
	//	("," usesFacadeModels+=[FacadeModel|QID])*)? imports+=ImportDirective*
	//	featureMappingStrategies+=FeatureMappingStrategy* //		('package' basePackage=QID)?
	//	("feature-mapping-defaults" featureMappingDefaults=EFeatureMappingOptions)? classifierMappings+=EClassifierMapping*
	//	("ePackages" "(" ePackages+=[ecore::EPackage|EString] ("," ePackages+=[ecore::EPackage|EString])* ")")?;
	public FacadeModelElements getFacadeModelAccess() {
		return (pFacadeModel != null) ? pFacadeModel : (pFacadeModel = new FacadeModelElements());
	}
	
	public ParserRule getFacadeModelRule() {
		return getFacadeModelAccess().getRule();
	}

	//MAPSTO:
	//	"->";
	public MAPSTOElements getMAPSTOAccess() {
		return (pMAPSTO != null) ? pMAPSTO : (pMAPSTO = new MAPSTOElements());
	}
	
	public ParserRule getMAPSTORule() {
		return getMAPSTOAccess().getRule();
	}

	//MAPSFROM:
	//	"<-";
	public MAPSFROMElements getMAPSFROMAccess() {
		return (pMAPSFROM != null) ? pMAPSFROM : (pMAPSFROM = new MAPSFROMElements());
	}
	
	public ParserRule getMAPSFROMRule() {
		return getMAPSFROMAccess().getRule();
	}

	//EClassifierMapping:
	//	EClassMapping | EDataTypeMapping | EEnumMapping;
	public EClassifierMappingElements getEClassifierMappingAccess() {
		return (pEClassifierMapping != null) ? pEClassifierMapping : (pEClassifierMapping = new EClassifierMappingElements());
	}
	
	public ParserRule getEClassifierMappingRule() {
		return getEClassifierMappingAccess().getRule();
	}

	//EClassMapping:
	//	"class" eClass=[ecore::EClass|QID] ("as" name=ID)? MAPSTO jClass=[java::JvmGenericType|QID]
	//	("feature-mapping-defaults" featureMappingDefaults=EFeatureMappingOptions)? ("life-cycle"
	//	lifeCycleHandler=LifeCycleImplementation)? //	('create-with' createExpression = XExpressionInClosure)?
	//	//	('dispose-with' disposeExpression = XExpressionInClosure)?
	//	("map" featureMappings+=EFeatureMapping (("map" | ",") featureMappings+=EFeatureMapping)*)? ("handle"
	//	eventHandlers+=EventHandler)*;
	public EClassMappingElements getEClassMappingAccess() {
		return (pEClassMapping != null) ? pEClassMapping : (pEClassMapping = new EClassMappingElements());
	}
	
	public ParserRule getEClassMappingRule() {
		return getEClassMappingAccess().getRule();
	}

	//LifeCycleImplementation:
	//	("method" methodImplementations+=InterfaceMethodImplementation)*;
	public LifeCycleImplementationElements getLifeCycleImplementationAccess() {
		return (pLifeCycleImplementation != null) ? pLifeCycleImplementation : (pLifeCycleImplementation = new LifeCycleImplementationElements());
	}
	
	public ParserRule getLifeCycleImplementationRule() {
		return getLifeCycleImplementationAccess().getRule();
	}

	//EventHandler:
	//	interfaceType=[java::JvmGenericType|QID] ("method" methodImplementations+=InterfaceMethodImplementation)*;
	public EventHandlerElements getEventHandlerAccess() {
		return (pEventHandler != null) ? pEventHandler : (pEventHandler = new EventHandlerElements());
	}
	
	public ParserRule getEventHandlerRule() {
		return getEventHandlerAccess().getRule();
	}

	//InterfaceMethodImplementation:
	//	interfaceMethod=[java::JvmOperation|FID] ("as" name=ID)? (MAPSTO methodBody=XExpressionInClosure)?;
	public InterfaceMethodImplementationElements getInterfaceMethodImplementationAccess() {
		return (pInterfaceMethodImplementation != null) ? pInterfaceMethodImplementation : (pInterfaceMethodImplementation = new InterfaceMethodImplementationElements());
	}
	
	public ParserRule getInterfaceMethodImplementationRule() {
		return getInterfaceMethodImplementationAccess().getRule();
	}

	//EFeatureMapping:
	//	eFeature=[ecore::EStructuralFeature] ("as" name=ID)? (MAPSTO jClass=[java::JvmGenericType|QID])? ("using"
	//	options=EFeatureMappingOptions)? ("method" methodImplementations+=InterfaceMethodImplementation)*;
	public EFeatureMappingElements getEFeatureMappingAccess() {
		return (pEFeatureMapping != null) ? pEFeatureMapping : (pEFeatureMapping = new EFeatureMappingElements());
	}
	
	public ParserRule getEFeatureMappingRule() {
		return getEFeatureMappingAccess().getRule();
	}

	//EFeatureMappingOptions:
	//	{EFeatureMappingOptions} ("strategy" strategy=[FeatureMappingStrategy])?;
	public EFeatureMappingOptionsElements getEFeatureMappingOptionsAccess() {
		return (pEFeatureMappingOptions != null) ? pEFeatureMappingOptions : (pEFeatureMappingOptions = new EFeatureMappingOptionsElements());
	}
	
	public ParserRule getEFeatureMappingOptionsRule() {
		return getEFeatureMappingOptionsAccess().getRule();
	}

	//EDataTypeMapping:
	//	"type" eDataType=[ecore::EDataType|QID] MAPSTO jClass=[java::JvmGenericType|QID] MAPSTO convertExpression=XExpression;
	public EDataTypeMappingElements getEDataTypeMappingAccess() {
		return (pEDataTypeMapping != null) ? pEDataTypeMapping : (pEDataTypeMapping = new EDataTypeMappingElements());
	}
	
	public ParserRule getEDataTypeMappingRule() {
		return getEDataTypeMappingAccess().getRule();
	}

	//EEnumMapping:
	//	"enum" eDataType=[ecore::EEnum|QID] MAPSTO jClass=[java::JvmGenericType|QID] literalMappings+=EEnumLiteralMapping*
	//	MAPSTO convertExpression=XExpression;
	public EEnumMappingElements getEEnumMappingAccess() {
		return (pEEnumMapping != null) ? pEEnumMapping : (pEEnumMapping = new EEnumMappingElements());
	}
	
	public ParserRule getEEnumMappingRule() {
		return getEEnumMappingAccess().getRule();
	}

	//EEnumLiteralMapping:
	//	enumLiteral=[ecore::EEnumLiteral] MAPSTO convertExpression=XExpression;
	public EEnumLiteralMappingElements getEEnumLiteralMappingAccess() {
		return (pEEnumLiteralMapping != null) ? pEEnumLiteralMapping : (pEEnumLiteralMapping = new EEnumLiteralMappingElements());
	}
	
	public ParserRule getEEnumLiteralMappingRule() {
		return getEEnumLiteralMappingAccess().getRule();
	}

	//FeatureMappingStrategy:
	//	"strategy" implType=[java::JvmGenericType|QID] ("as" name=ID)? MAPSTO interfaceType=[java::JvmGenericType|QID] ("map"
	//	patterns+=FeatureMappingStrategyPattern)*;
	public FeatureMappingStrategyElements getFeatureMappingStrategyAccess() {
		return (pFeatureMappingStrategy != null) ? pFeatureMappingStrategy : (pFeatureMappingStrategy = new FeatureMappingStrategyElements());
	}
	
	public ParserRule getFeatureMappingStrategyRule() {
		return getFeatureMappingStrategyAccess().getRule();
	}

	//FeatureMappingStrategyPattern:
	//	featureName=NamePattern "<" (typeParameters+=JvmTypeParameter ("," typeParameters+=JvmTypeParameter)*)? ">" ("method"
	//	methodPatterns+=FeatureMappingStrategyMethodPattern)*;
	public FeatureMappingStrategyPatternElements getFeatureMappingStrategyPatternAccess() {
		return (pFeatureMappingStrategyPattern != null) ? pFeatureMappingStrategyPattern : (pFeatureMappingStrategyPattern = new FeatureMappingStrategyPatternElements());
	}
	
	public ParserRule getFeatureMappingStrategyPatternRule() {
		return getFeatureMappingStrategyPatternAccess().getRule();
	}

	//NamePattern returns ecore::EString:
	//	ID | STRING;
	public NamePatternElements getNamePatternAccess() {
		return (pNamePattern != null) ? pNamePattern : (pNamePattern = new NamePatternElements());
	}
	
	public ParserRule getNamePatternRule() {
		return getNamePatternAccess().getRule();
	}

	//JvmTypeParameter returns java::JvmTypeParameter:
	//	name=ID;
	public JvmTypeParameterElements getJvmTypeParameterAccess() {
		return (pJvmTypeParameter != null) ? pJvmTypeParameter : (pJvmTypeParameter = new JvmTypeParameterElements());
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//FeatureMappingStrategyMethodPattern:
	//	strategyMethod=[java::JvmOperation] MAPSTO targetMember=(JvmField | JvmOperation) MAPSTO
	//	targetBody=XExpressionInClosure;
	public FeatureMappingStrategyMethodPatternElements getFeatureMappingStrategyMethodPatternAccess() {
		return (pFeatureMappingStrategyMethodPattern != null) ? pFeatureMappingStrategyMethodPattern : (pFeatureMappingStrategyMethodPattern = new FeatureMappingStrategyMethodPatternElements());
	}
	
	public ParserRule getFeatureMappingStrategyMethodPatternRule() {
		return getFeatureMappingStrategyMethodPatternAccess().getRule();
	}

	//JvmField returns java::JvmField:
	//	"field" type=JvmTypeReference simpleName=ID;
	public JvmFieldElements getJvmFieldAccess() {
		return (pJvmField != null) ? pJvmField : (pJvmField = new JvmFieldElements());
	}
	
	public ParserRule getJvmFieldRule() {
		return getJvmFieldAccess().getRule();
	}

	//JvmOperation returns java::JvmOperation:
	//	returnType=JvmTypeReference simpleName=ID "(" (parameters+=JvmFormalParameter ("," parameters+=JvmFormalParameter)*)?
	//	")";
	public JvmOperationElements getJvmOperationAccess() {
		return (pJvmOperation != null) ? pJvmOperation : (pJvmOperation = new JvmOperationElements());
	}
	
	public ParserRule getJvmOperationRule() {
		return getJvmOperationAccess().getRule();
	}

	//JvmFormalParameter returns java::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ID;
	public JvmFormalParameterElements getJvmFormalParameterAccess() {
		return (pJvmFormalParameter != null) ? pJvmFormalParameter : (pJvmFormalParameter = new JvmFormalParameterElements());
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	/// *
	//strategy GetSetStrategy1 -> Association
	//	map X<M,ME,V,VE>
	//		method get(M) -> VE V.getX() -> v.getX()
	//		method set(M,ME) -> void V.setX(VE) -> v.setX(ve)
	//	map X<M,ME,V,VE>
	//		method get(M) -> VE V.x -> v.x
	//		method set(M,ME) -> VE V.x -> v.x = ve
	// * / / *
	//NameTypePatternFMS returns FeatureMappingStrategy:
	//	 {NameTypePatternFMS}
	//	 'strategy' implType = [java::JvmGenericType|QID] 'for' interfaceType = [java::JvmGenericType|QID] 
	//	 '{'
	//	 	pattern = NameTypePattern
	//	 '}'
	//;
	//
	//NameTypePattern:
	//	{NameTypePattern}
	//	'members' '{'
	//		(memberPatterns += MemberPattern)*
	//	'}'
	//;
	//
	//MemberPattern: 
	//	typePattern = TypePattern namePattern = NamePattern (parameterListPattern = TypeListPattern)?
	//;
	//
	//TypeListPattern:
	//	{TypeListPattern} '(' (parameterTypePatterns += TypePattern (','parameterTypePatterns += TypePattern)*)? ')'
	//;
	//
	//TypePattern returns ecore::EString: (QID | '#' | '$' | STRING);
	//NamePattern returns ecore::EString: (ID | '$' | STRING)+;
	// * / //
	//EString returns ecore::EString:
	//	STRING;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//QID returns ecore::EString:
	//	ID ("." ID)*;
	public QIDElements getQIDAccess() {
		return (pQID != null) ? pQID : (pQID = new QIDElements());
	}
	
	public ParserRule getQIDRule() {
		return getQIDAccess().getRule();
	}

	//FID returns ecore::EString:
	//	ID ("(" (ID ("," ID)*)? ")")?;
	public FIDElements getFIDAccess() {
		return (pFID != null) ? pFID : (pFID = new FIDElements());
	}
	
	public ParserRule getFIDRule() {
		return getFIDAccess().getRule();
	}

	//ImportDirective:
	//	"import" importedNamespace=(QualifiedNameWithWildcard | STRING);
	public ImportDirectiveElements getImportDirectiveAccess() {
		return (pImportDirective != null) ? pImportDirective : (pImportDirective = new ImportDirectiveElements());
	}
	
	public ParserRule getImportDirectiveRule() {
		return getImportDirectiveAccess().getRule();
	}

	//QualifiedNameWithWildcard returns ecore::EString:
	//	QID ".*"?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return (pQualifiedNameWithWildcard != null) ? pQualifiedNameWithWildcard : (pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements());
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	////
	//XAdditiveExpression returns xbase::XExpression:
	//	XMultiplicativeExpression (=> ({xbase::XBinaryOperation.leftOperand=current}
	//	feature=[java::JvmIdentifiableElement|OpAdd]) rightOperand=XMultiplicativeExpression)*;
	public XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return (pXAdditiveExpression != null) ? pXAdditiveExpression : (pXAdditiveExpression = new XAdditiveExpressionElements());
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-" | "|";
	public OpAddElements getOpAddAccess() {
		return (pOpAdd != null) ? pOpAdd : (pOpAdd = new OpAddElements());
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XPrimaryExpression returns xbase::XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression | //	XForLoopExpression |
	//	XWhileExpression | //	XDoWhileExpression |
	//	XThrowExpression | //	XReturnExpression |
	//	XTryCatchFinallyExpression | XParenthesizedExpression;
	public XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return (pXPrimaryExpression != null) ? pXPrimaryExpression : (pXPrimaryExpression = new XPrimaryExpressionElements());
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} / * (declaringType=[types::JvmDeclaredType] '::')? * / feature=[types::JvmIdentifiableElement|ValidID]
	//	OpSingleAssign value=XAssignment | XOrExpression (=> ({XBinaryOperation.leftOperand=current}
	//	feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof")
	//	type=[types::JvmType|QualifiedName] | => ({XBinaryOperation.leftOperand=current}
	//	feature=[types::JvmIdentifiableElement|OpCompare]) rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XCastedExpression | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XMemberFeatureCall (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} "." feature=[types::JvmIdentifiableElement|ValidID]
	//	OpSingleAssign) value=XAssignment | => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." |
	//	spreading?="*.")) ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|ValidID] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
	//	memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? => memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XClosure | XBooleanLiteral | XIntLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	{XClosure} "[" => ((declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionInsideBlock ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" => (localVarName=ValidID ":")? switch=XExpression "{" cases+=XCasePart+ ("default" ":"
	//	default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	typeGuard=JvmTypeReference? ("case" case=XExpression)? ":" then=XExpression;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	{XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":" forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionInsideBlock returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionInsideBlockElements getXExpressionInsideBlockAccess() {
		return gaXbase.getXExpressionInsideBlockAccess();
	}
	
	public ParserRule getXExpressionInsideBlockRule() {
		return getXExpressionInsideBlockAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} declaringType=[types::JvmDeclaredType|StaticQualifier]? ("<" typeArguments+=JvmArgumentTypeReference
	//	("," typeArguments+=JvmArgumentTypeReference)* ">")? feature=[types::JvmIdentifiableElement|IdOrSuper] (=>
	//	explicitOperationCall?="(" (featureCallArguments+=XShortClosure | featureCallArguments+=XExpression (","
	//	featureCallArguments+=XExpression)*)? ")")? => featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//IdOrSuper:
	//	ValidID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//// This is a workaround since ANTLR will not be able to resolve
	//// StaticQualifier: ValidID ('::' ValidID)*; and XFeatureCall: (StaticQualifier '::')? ValidID
	//// Make sure to change the value converter if you change the syntax of the StaticQualifier
	//StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? "("
	//	(arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")" => arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XIntLiteral returns XExpression:
	//	{XIntLiteral} value=INT;
	public XbaseGrammarAccess.XIntLiteralElements getXIntLiteralAccess() {
		return gaXbase.getXIntLiteralAccess();
	}
	
	public ParserRule getXIntLiteralRule() {
		return getXIntLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" => expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} "[" "]")* | XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)* ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
