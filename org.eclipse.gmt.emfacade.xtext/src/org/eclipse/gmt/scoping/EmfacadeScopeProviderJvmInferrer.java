/*
 * generated by Xtext
 */
package org.eclipse.gmt.scoping;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gmt.emfacade.EClassMapping;
import org.eclipse.gmt.emfacade.EDataTypeMapping;
import org.eclipse.gmt.emfacade.FacadeModel;
import org.eclipse.gmt.emfacade.builder.AbstractConverter;
import org.eclipse.gmt.emfacade.builder.IBinderHelper;
import org.eclipse.gmt.emfacade.builder.IConverterContext;
import org.eclipse.gmt.emfacade.util.EmfacadeJvmInferrerHelper;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.common.types.JvmType;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.resource.EObjectDescription;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.xbase.scoping.XbaseScopeProvider;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping
 * on how and when to use it 
 *
 */
public class EmfacadeScopeProviderJvmInferrer extends EmfacadeJvmInferrerHelper {

	public List<IEObjectDescription> getEClassMappingVariables(EClassMapping eClassMapping) {
		EClass eClass = eClassMapping.getEClass();
    	FacadeModel model = EcoreUtil2.getContainerOfType(eClassMapping, FacadeModel.class);
    	List<IEObjectDescription> descriptions = new ArrayList<IEObjectDescription>();
    	if (! eClass.eIsProxy()) {
	    	String modelTypeName = model.getGenModel().getBasePackage() + "." + eClass.getEPackage().getName().toLowerCase() + "." + eClass.getName();
	    	descriptions.add(EObjectDescription.create(XbaseScopeProvider.THIS, getJvmTypeRef(IBinderHelper.class, eClassMapping).getType()));
			addDescription(XbaseScopeProvider.IT, modelTypeName, eClassMapping, descriptions);
			descriptions.add(EObjectDescription.create("view", eClassMapping.getJClass()));
//			addDescription("_binder", AbstractBinder.class.getName(), eClassMapping, descriptions);
//			addDescription("_context", IBinderContext.class.getName(), eClassMapping, descriptions);
    	}
		return descriptions;
	}
	private void addDescription(String name, String typeName, EObject context, List<IEObjectDescription> descriptions) {
		addDescription(QualifiedName.create(name), typeName, context, descriptions);
	}

	private void addDescription(QualifiedName name, String typeName, EObject context, List<IEObjectDescription> descriptions) {
		JvmType jvmType = null;
		try {
			jvmType = getJvmTypeRef(typeName, context).getType();
		} catch (Exception e) {
		}
		if (jvmType != null) {
			descriptions.add(EObjectDescription.create(name, jvmType));
		}
	}
	
	public List<IEObjectDescription> getEDataTypeMappingVariables(EDataTypeMapping eDataTypeMapping) {
		EDataType eDataType = eDataTypeMapping.getEDataType();
		List<IEObjectDescription> descriptions = new ArrayList<IEObjectDescription>();
		if (! eDataType.eIsProxy()) {
			String modelTypeName = eDataType.getInstanceClassName();
			if (modelTypeName == null) {
		    	FacadeModel model = EcoreUtil2.getContainerOfType(eDataTypeMapping, FacadeModel.class);
				modelTypeName = model.getGenModel().getBasePackage() + "." + eDataType.getEPackage().getName().toLowerCase() + "." + eDataType.getName();
			}
			addDescription("model", modelTypeName, eDataTypeMapping, descriptions);
			descriptions.add(EObjectDescription.create("view", eDataTypeMapping.getJClass()));
			addDescription("_converter", AbstractConverter.class.getName(), eDataTypeMapping, descriptions);
			addDescription("_context", IConverterContext.class.getName(), eDataTypeMapping, descriptions);
		}
		return descriptions;
	}
	
	public EObject getEObject(List<IEObjectDescription> descriptions, String name) {
		for (IEObjectDescription description : descriptions) {
			if (name.equals(description.getName().toString())) {
				return description.getEObjectOrProxy();
			}
		}
		return null;
	}
}
