/*
 * generated by Xtext
 */
package org.eclipse.gmt.scoping;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.EcorePackage;
import org.eclipse.gmt.emfacade.EClassMapping;
import org.eclipse.gmt.emfacade.EDataTypeMapping;
import org.eclipse.gmt.emfacade.EEnumMapping;
import org.eclipse.gmt.emfacade.EmfacadePackage;
import org.eclipse.gmt.emfacade.FacadeModel;
import org.eclipse.gmt.emfacade.FeatureMappingStrategy;
import org.eclipse.gmt.emfacade.InterfaceImplementation;
import org.eclipse.gmt.emfacade.InterfaceMethodImplementation;
import org.eclipse.gmt.emfacade.builder.IBinderHelper;
import org.eclipse.gmt.emfacade.util.Util;
import org.eclipse.xtext.common.types.JvmDeclaredType;
import org.eclipse.xtext.common.types.JvmFeature;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmGenericType;
import org.eclipse.xtext.common.types.JvmMember;
import org.eclipse.xtext.common.types.JvmOperation;
import org.eclipse.xtext.common.types.JvmTypeReference;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.resource.EObjectDescription;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.SimpleScope;
import org.eclipse.xtext.xbase.scoping.LocalVariableScopeContext;
import org.eclipse.xtext.xbase.scoping.XbaseScopeProvider;

import com.google.common.base.Predicate;
import com.google.inject.Inject;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping on
 * how and when to use it
 * 
 */
public class EmfacadeScopeProvider extends XbaseScopeProvider {

	@Inject
	EmfacadeScopeProviderJvmInferrer jvmInferrer;

	@Override
	public IScope getScope(final EObject context, EReference ref) {
		FacadeModel model = Util.getContainerOfType(context, FacadeModel.class);
		if (ref == EmfacadePackage.eINSTANCE.getEFeatureMapping_EFeature()) {
			EClassMapping ctx = Util.getContainerOfType(context, EClassMapping.class);
			return namedElementsScope(ctx.getEClass(), EcorePackage.eINSTANCE.getEClass_EAllStructuralFeatures(), null, EcorePackage.eINSTANCE.getENamedElement_Name());
		} else if (ref == EmfacadePackage.eINSTANCE.getEEnumLiteralMapping_EnumLiteral()) {
			EEnumMapping ctx = Util.getContainerOfType(context, EEnumMapping.class);
			return namedElementsScope(ctx.getEDataType(), EcorePackage.eINSTANCE.getEEnum_ELiterals(), null, EcorePackage.eINSTANCE.getENamedElement_Name());
		} else if (ref == EmfacadePackage.eINSTANCE.getInterfaceMethodImplementation_InterfaceMethod()) {
			InterfaceImplementation impl = Util.getContainerOfType(context, InterfaceImplementation.class);
			Collection<IEObjectDescription> descriptions = new ArrayList<IEObjectDescription>();
			JvmGenericType interfaceType = impl.getInterfaceType(jvmInferrer);
			if (interfaceType != null) {
				addDescriptions(interfaceType.getAllFeatures(), true, descriptions);
			}
			return new SimpleScope(descriptions);
		} else if (ref.getEType() == EmfacadePackage.eINSTANCE.getFeatureMappingStrategy()) {
			Collection<IEObjectDescription> descriptions = new ArrayList<IEObjectDescription>();
			Collection<FacadeModel> models = new ArrayList<FacadeModel>();
			addFacadeModels(model, models);
			for (FacadeModel facadeModel : models) {
				for (FeatureMappingStrategy featureMappingStrategy : facadeModel.getFeatureMappingStrategies()) {
					JvmGenericType type = featureMappingStrategy.getImplType();
					if (type != null && (!type.eIsProxy())) {
						descriptions.add(EObjectDescription.create(QualifiedName.create(type.getSimpleName()), featureMappingStrategy));
					}
				}
			}
			return new SimpleScope(descriptions);
		} else if (ref == EmfacadePackage.eINSTANCE.getFeatureMappingStrategy_InterfaceType()) {
			FeatureMappingStrategy featureMappingStrategy = (FeatureMappingStrategy) context;
			Collection<IEObjectDescription> descriptions = new ArrayList<IEObjectDescription>();
			if (featureMappingStrategy.getImplType() != null) {
				List<JvmMember> members = new ArrayList<JvmMember>();
				addMembers(featureMappingStrategy.getImplType(), JvmGenericType.class, new Predicate<JvmGenericType>() {
							public boolean apply(JvmGenericType input) {
								return input.isInterface();
							}
						}, -1, members);
				for (JvmMember member : members) {
					QualifiedName qName = QualifiedName.create(member.getSimpleName());
					descriptions.add(EObjectDescription.create(qName, member));
				}
			}
			return new SimpleScope(descriptions);
		}
		return super.getScope(context, ref);
	}
	
	//

	private static void addFacadeModels(FacadeModel model, Collection<FacadeModel> models) {
		if (! models.contains(model)) {
			models.add(model);
			for (FacadeModel usedModel : model.getUsesFacadeModels()) {
				addFacadeModels(usedModel, models);
			}
		}
	}

	@Override
	protected IScope createLocalVarScope(IScope parent, LocalVariableScopeContext scopeContext) {
		EObject context = scopeContext.getContext();
		if (context instanceof InterfaceMethodImplementation) {
			InterfaceImplementation impl = Util.getContainerOfType(context, InterfaceImplementation.class);
			JvmDeclaredType inferredType = impl.getInterfaceType(jvmInferrer);
			if (inferredType != null) {
				JvmTypeReference helperType = jvmInferrer.getJvmTypeRef(IBinderHelper.class, context);
				parent = new SimpleScope(parent, Collections.singleton(EObjectDescription.create(XbaseScopeProvider.THIS, helperType.getType())));
				Collection<IEObjectDescription> descriptions = new ArrayList<IEObjectDescription>();
				EObject itObject = null;
				for (JvmFormalParameter param : ((InterfaceMethodImplementation) context).getInterfaceMethod().getParameters()) {
					IEObjectDescription description = EObjectDescription.create(param.getSimpleName(), param);
					if (itObject == null) {
						itObject = param;
					}
					descriptions.add(description);
				}
				if (itObject != null) {
					parent = new SimpleScope(parent, Collections.singleton(EObjectDescription.create(XbaseScopeProvider.IT, itObject)));
				}
				return new SimpleScope(parent, descriptions);
			}
		} else if (context instanceof EClassMapping) {
			JvmTypeReference helperType = jvmInferrer.getJvmTypeRef(IBinderHelper.class, context);
			parent = new SimpleScope(parent, Collections.singleton(EObjectDescription.create(XbaseScopeProvider.THIS, helperType.getType())));
			EClassMapping eClassMapping = (EClassMapping) context;
			Collection<IEObjectDescription> descriptions = jvmInferrer.getEClassMappingVariables(eClassMapping);
			return new SimpleScope(parent, descriptions);
		} else if (context instanceof EDataTypeMapping) {
			EDataTypeMapping eDataTypeMapping = (EDataTypeMapping) context;
			Collection<IEObjectDescription> descriptions = jvmInferrer
					.getEDataTypeMappingVariables(eDataTypeMapping);
			return new SimpleScope(parent, descriptions);
		}
		return super.createLocalVarScope(parent, scopeContext);
	}

	//

	private static void addDescriptions(EObject eObject,
			EStructuralFeature valueFeature, EClassifier eClass,
			EStructuralFeature prefixFeature, EStructuralFeature nameFeature,
			Collection<IEObjectDescription> descriptions) {
		if (eObject != null) {
			Object prefix = (prefixFeature != null ? eObject
					.eGet(prefixFeature) : null);
			Object value = eObject.eGet(valueFeature);
			if (value instanceof EObject
					&& (eClass == null || eClass.isInstance(value))) {
				QualifiedName qName = createQualifiedName(prefix,
						((EObject) value).eGet(nameFeature));
				if (qName != null) {
					descriptions.add(EObjectDescription.create(qName,
							(EObject) value));
				}
			} else if (value instanceof Iterable<?>) {
				for (Object element : ((Iterable<?>) value)) {
					if (element instanceof EObject
							&& (eClass == null || eClass.isInstance(element))) {
						QualifiedName qName = createQualifiedName(prefix,
								((EObject) element).eGet(nameFeature));
						if (qName != null) {
							descriptions.add(EObjectDescription.create(qName,
									(EObject) element));
						}
					}
				}
			}
		}
	}

	private static QualifiedName createQualifiedName(Object... segments) {
		int count = 0;
		for (int i = 0; i < segments.length; i++) {
			if (segments[i] != null) {
				count++;
			}
		}
		if (count == 0) {
			return null;
		}
		String[] strings = new String[count];
		int pos = 0;
		for (int i = 0; i < segments.length; i++) {
			if (segments[i] != null) {
				strings[pos++] = String.valueOf(segments[i]);
			}
		}
		return QualifiedName.create(strings);
	}

	private static IScope namedElementsScope(EObject eObject,
			EStructuralFeature valueFeature, EClassifier eClass,
			EStructuralFeature nameFeature) {
		Collection<IEObjectDescription> descriptions = new ArrayList<IEObjectDescription>();
		addDescriptions(eObject, valueFeature, eClass, null, nameFeature,
				descriptions);
		return new SimpleScope(descriptions);
	}

	private static void addDescriptions(Iterable<? extends JvmFeature> features, Boolean includeOperationParamsTypesOrNames, Collection<IEObjectDescription> descriptions) {
		for (JvmFeature feature : features) {
			if ("java.lang.Object".equals(feature.getDeclaringType().getQualifiedName())) {
				continue;
			}
			String simpleName = feature.getSimpleName();
			if (feature instanceof JvmOperation && includeOperationParamsTypesOrNames != null) {
				simpleName += "(";
				for (JvmFormalParameter param : ((JvmOperation) feature).getParameters()) {
					if (!simpleName.endsWith("(")) {
						simpleName += ",";
					}
					String typeName = (includeOperationParamsTypesOrNames ? param.getParameterType().getSimpleName() : param.getSimpleName());
					simpleName += typeName;
				}
				simpleName += ")";
			}
			descriptions.add(EObjectDescription.create(simpleName, feature));
		}
	}

	private static <T extends JvmMember> void addMembers(JvmDeclaredType type,
			Class<T> cl, Predicate<T> predicate, int superLevels,
			List<JvmMember> members) {
		for (JvmMember member : type.getMembers()) {
			if ((cl == null || cl.isInstance(member))
					&& (predicate == null || predicate.apply((T) member))) {
				members.add(member);
			}
		}
		if (superLevels != 0) {
			for (JvmTypeReference superType : type.getSuperTypes()) {
				if (superType.getType() instanceof JvmDeclaredType) {
					addMembers((JvmDeclaredType) superType.getType(), cl,
							predicate, superLevels - 1, members);
				}
			}
		}
	}
}
